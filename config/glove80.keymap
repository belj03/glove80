/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LOWER>, <&to LOWER>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        closeApp: closeApp {
            compatible = "zmk,behavior-tap-dance";
            label = "CLOSEAPP";
            #binding-cells = <0>;
            bindings = <&kp LC(F4)>, <&kp LA(F4)>;
        };

        backForward: backForward {
            compatible = "zmk,behavior-tap-dance";
            label = "BACKFORWARD";
            #binding-cells = <0>;
            bindings = <&macroBack>, <&macroForward>;
        };

        viRCTRL: viRCTRL {
            compatible = "zmk,behavior-tap-dance";
            label = "VIRCTRL";
            #binding-cells = <0>;
            bindings = <&kp LCTRL>, <&kp RCTRL>;
        };

        morphGui1: morphGui1 {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPHGUI1";
            bindings = <&kp LG(N1)>, <&kp N1>;

            #binding-cells = <0>;
            keep-mods = <(MOD_RGUI|MOD_RALT|MOD_RSFT|MOD_RCTL|MOD_LGUI|MOD_LSFT|MOD_LCTL|MOD_LALT)>;
            mods = <(MOD_RGUI|MOD_RALT|MOD_RSFT|MOD_RCTL|MOD_LGUI|MOD_LALT|MOD_LSFT|MOD_LCTL)>;
        };

        morphGui2: morphGui2 {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPHGUI2";
            bindings = <&kp LG(N2)>, <&kp N2>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LSFT|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RSFT|MOD_RALT|MOD_RGUI)>;
            keep-mods = <(MOD_LCTL|MOD_LSFT|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RSFT|MOD_RALT|MOD_RGUI)>;
        };

        morphGui3: morphGui3 {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPHGUI3";
            bindings = <&kp LG(N3)>, <&kp N3>;

            #binding-cells = <0>;
            mods = <(MOD_RGUI|MOD_RALT|MOD_RSFT|MOD_RCTL|MOD_LGUI|MOD_LALT|MOD_LSFT|MOD_LCTL)>;
            keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RCTL|MOD_RSFT|MOD_RALT|MOD_RGUI)>;
        };

        morphGui4: morphGui4 {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPHGUI4";
            bindings = <&kp LG(N4)>, <&kp N4>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LSFT|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RSFT|MOD_RALT|MOD_RGUI)>;
            keep-mods = <(MOD_LCTL|MOD_LSFT|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RSFT|MOD_RGUI|MOD_RALT)>;
        };

        morphGui5: morphGui5 {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPHGUI5";
            bindings = <&kp LG(N5)>, <&kp N5>;

            #binding-cells = <0>;
            mods = <(MOD_RGUI|MOD_RALT|MOD_RSFT|MOD_RCTL|MOD_LGUI|MOD_LALT|MOD_LSFT|MOD_LCTL)>;
            keep-mods = <(MOD_RGUI|MOD_RALT|MOD_RSFT|MOD_RCTL|MOD_LGUI|MOD_LALT|MOD_LSFT|MOD_LCTL)>;
        };

        morphGui6: morphGui6 {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPHGUI6";
            bindings = <&kp LG(N6)>, <&kp N6>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LSFT|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RSFT|MOD_RGUI|MOD_RALT)>;
            keep-mods = <(MOD_RGUI|MOD_RALT|MOD_RSFT|MOD_RCTL|MOD_LGUI|MOD_LALT|MOD_LSFT|MOD_LCTL)>;
        };

        morphGui7: morphGui7 {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPHGUI7";
            bindings = <&kp LG(N7)>, <&kp N7>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LSFT|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RSFT|MOD_RALT|MOD_RGUI)>;
            keep-mods = <(MOD_LCTL|MOD_LSFT|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RSFT|MOD_RALT|MOD_RGUI)>;
        };

        morphGui8: morphGui8 {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPHGUI8";
            bindings = <&kp LG(N8)>, <&kp N8>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LSFT|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RSFT|MOD_RALT|MOD_RGUI)>;
            keep-mods = <(MOD_LCTL|MOD_LSFT|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RSFT|MOD_RALT|MOD_RGUI)>;
        };

        morphGui9: morphGui9 {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPHGUI9";
            bindings = <&kp LG(N9)>, <&kp N9>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LSFT|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RSFT|MOD_RALT|MOD_RGUI)>;
            keep-mods = <(MOD_LCTL|MOD_LSFT|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RSFT|MOD_RALT|MOD_RGUI)>;
        };

        morphGui0: morphGui0 {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPHGUI0";
            bindings = <&kp LG(N0)>, <&kp N0>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LSFT|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RSFT|MOD_RALT|MOD_RGUI)>;
            keep-mods = <(MOD_LCTL|MOD_LSFT|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RSFT|MOD_RALT|MOD_RGUI)>;
        };

        viLeftAlt: viLeftAlt {
            compatible = "zmk,behavior-tap-dance";
            label = "VILEFTALT";
            #binding-cells = <0>;
            bindings = <&kp LALT>, <&kp RALT>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };

        macroBack: macroBack {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LEFT) &kp ESC>;
            label = "MACROBACK";
            wait-ms = <300>;
            tap-ms = <100>;
        };

        macroForward: macroForward {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(RIGHT_ARROW) &kp ESC>;
            label = "MACROFORWARD";
            wait-ms = <300>;
            tap-ms = <100>;
        };

        macroExplorer: macroExplorer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(N1) &kp LS(TAB) &kp HOME &kp ESC>;
            label = "MACROEXPLORER";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp LC(Z)       &kp LC(A)   &kp LC(X)   &kp LC(C)   &kp LC(V)                                                                                             &closeApp   &backForward  &macroExplorer  &kp F9      &kp F10
&kp EQUAL       &morphGui1  &morphGui2  &morphGui3  &morphGui4  &morphGui5                                                                    &morphGui6  &morphGui7  &morphGui8    &morphGui9      &morphGui0  &kp MINUS
&kp ESC         &kp Q       &kp W       &kp E       &kp R       &kp T                                                                         &kp Y       &kp U       &kp I         &kp O           &kp P       &kp BSLH
&kp TAB         &kp A       &kp S       &kp D       &kp F       &kp G                                                                         &kp H       &kp J       &kp K         &kp L           &kp SEMI    &kp SQT
&kp GRAVE       &kp Z       &kp X       &kp C       &kp V       &kp B       &kp LSHFT  &kp LCTRL  &layer_td  &kp LGUI    &viRCTRL  &kp RSHFT  &kp N       &kp M       &kp COMMA     &kp DOT         &kp FSLH    &kp PG_UP
&magic MAGIC 0  &kp HOME    &kp END     &kp LEFT    &kp RIGHT               &kp BSPC   &kp DEL    &kp LALT   &viLeftAlt  &kp RET   &kp SPACE              &kp UP      &kp DOWN      &kp LBKT        &kp RBKT    &kp PG_DN
            >;
        };

        lower_layer {
            bindings = <
&kp F1  &kp F2       &kp F3    &kp F4    &kp F5                                                                                     &kp F6      &kp F7        &kp F8         &kp F9           &kp F10
&trans  &none        &none     &none     &none      &kp HOME                                                             &kp LPAR   &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp PSCRN
&trans  &none        &none     &kp UP    &none      &kp END                                                              &kp RPAR   &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp SLCK
&trans  &none        &kp LEFT  &kp DOWN  &kp RIGHT  &kp PG_UP                                                            &kp PRCNT  &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &none
&trans  &kp K_CMENU  &none     &kp F11   &kp F12    &kp PG_DN  &trans  &trans  &to DEFAULT  &kp K_CMENU  &trans  &trans  &kp COMMA  &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &trans
&trans  &kp CAPS     &kp INS   &kp F11   &kp F12               &trans  &trans  &trans       &trans       &trans  &trans             &kp KP_N0   &kp KP_N0     &kp KP_DOT     &kp KP_ENTER     &trans
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                      &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                              &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                    &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                    &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &bt_0            &bt_1            &bt_2            &bt_3            &none      &none      &none  &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &out OUT_USB     &none            &none                             &kp SPACE  &kp ENTER  &none  &none  &none  &none         &none  &none  &none  &none  &to FACTORY_TEST
            >;
        };

        factory_test_layer {
            bindings = <
&kp N0  &kp N6  &kp N2  &kp N8  &kp N4                                                                  &kp N4  &kp N8  &kp N2  &kp N6  &kp N0
&kp N1  &kp N7  &kp N3  &kp N9  &kp N5  &kp N0                                                  &kp N0  &kp N5  &kp N9  &kp N3  &kp N7  &kp N1
&kp N2  &kp N8  &kp N4  &kp N0  &kp N6  &kp N1                                                  &kp N1  &kp N6  &kp N0  &kp N4  &kp N8  &kp N2
&kp N3  &kp N9  &kp N5  &kp N1  &kp N7  &kp N2                                                  &kp N2  &kp N7  &kp N1  &kp N5  &kp N9  &kp N3
&kp N4  &kp N0  &kp N6  &kp N2  &kp N8  &kp N3  &kp N4  &kp N5  &kp N6  &kp N6  &kp N5  &kp N4  &kp N3  &kp N8  &kp N2  &kp N6  &kp N0  &kp N4
&kp N5  &kp N1  &kp N7  &kp N3  &kp N9          &kp N7  &kp N8  &kp N9  &kp N9  &kp N8  &kp N7          &kp N9  &kp N3  &kp N7  &kp N1  &kp N5
            >;
        };
    };
};
